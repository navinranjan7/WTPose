09/17 19:44:00 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.17 (default, Jul  5 2023, 21:04:15) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 592372312
    GPU 0,1: NVIDIA A100-PCIE-40GB
    CUDA_HOME: None
    GCC: n/a
    PyTorch: 1.11.0
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, 

    TorchVision: 0.12.0
    OpenCV: 4.8.0
    MMEngine: 0.8.3

Runtime environment:
    cudnn_benchmark: False
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 592372312
    Distributed launcher: pytorch
    Distributed training: True
    GPU number: 2
------------------------------------------------------------

09/17 19:44:01 - mmengine - INFO - Config:
auto_scale_lr = dict(base_batch_size=256)
backend_args = dict(backend='local')
codec = dict(
    heatmap_size=(
        64,
        64,
    ),
    input_size=(
        256,
        256,
    ),
    sigma=2,
    type='MSRAHeatmap')
custom_hooks = [
    dict(type='SyncBuffersHook'),
]
data_mode = 'topdown'
data_root_aic = 'data/aic/'
data_root_coco = 'data/coco/'
dataset_aic = dict(
    ann_file='annotations/aic_train.json',
    data_mode='topdown',
    data_prefix=dict(
        img=
        'ai_challenger_keypoint_train_20170902/keypoint_train_images_20170902/'
    ),
    data_root='data/aic/',
    pipeline=[
        dict(
            mapping=[
                (
                    0,
                    6,
                ),
                (
                    1,
                    8,
                ),
                (
                    2,
                    10,
                ),
                (
                    3,
                    5,
                ),
                (
                    4,
                    7,
                ),
                (
                    5,
                    9,
                ),
                (
                    6,
                    12,
                ),
                (
                    7,
                    14,
                ),
                (
                    8,
                    16,
                ),
                (
                    9,
                    11,
                ),
                (
                    10,
                    13,
                ),
                (
                    11,
                    15,
                ),
                (
                    12,
                    17,
                ),
                (
                    13,
                    18,
                ),
            ],
            num_keypoints=19,
            type='KeypointConverter'),
    ],
    type='AicDataset')
default_hooks = dict(
    checkpoint=dict(
        interval=10,
        rule='greater',
        save_best='coco/AP',
        type='CheckpointHook'),
    logger=dict(interval=50, type='LoggerHook'),
    param_scheduler=dict(type='ParamSchedulerHook'),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    timer=dict(type='IterTimerHook'),
    visualization=dict(enable=False, type='PoseVisualizationHook'))
default_scope = 'mmpose'
env_cfg = dict(
    cudnn_benchmark=False,
    dist_cfg=dict(backend='nccl'),
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0))
keypoint_mapping_aic = [
    (
        0,
        6,
    ),
    (
        1,
        8,
    ),
    (
        2,
        10,
    ),
    (
        3,
        5,
    ),
    (
        4,
        7,
    ),
    (
        5,
        9,
    ),
    (
        6,
        12,
    ),
    (
        7,
        14,
    ),
    (
        8,
        16,
    ),
    (
        9,
        11,
    ),
    (
        10,
        13,
    ),
    (
        11,
        15,
    ),
    (
        12,
        17,
    ),
    (
        13,
        18,
    ),
]
keypoint_mapping_coco = [
    (
        0,
        0,
    ),
    (
        1,
        1,
    ),
    (
        2,
        2,
    ),
    (
        3,
        3,
    ),
    (
        4,
        4,
    ),
    (
        5,
        5,
    ),
    (
        6,
        6,
    ),
    (
        7,
        7,
    ),
    (
        8,
        8,
    ),
    (
        9,
        9,
    ),
    (
        10,
        10,
    ),
    (
        11,
        11,
    ),
    (
        12,
        12,
    ),
    (
        13,
        13,
    ),
    (
        14,
        14,
    ),
    (
        15,
        15,
    ),
    (
        16,
        16,
    ),
]
launcher = 'pytorch'
load_from = None
log_level = 'INFO'
log_processor = dict(
    by_epoch=True, num_digits=6, type='LogProcessor', window_size=50)
model = dict(
    backbone=dict(
        arch='base',
        drop_path_rate=0.3,
        init_cfg=dict(
            checkpoint=
            '/home/nr4325/Desktop/Pose4/mmpose/ImageNet_pretrained_model/resnet101_swinv2_b.pth',
            type='Pretrained'),
        type='wtSwinV2',
        wtm_dilations=[
            2,
            1,
            4,
            1,
            6,
            1,
            8,
            1,
        ],
        wtm_dim=128,
        wtm_in_dim=1920,
        wtm_kernel_size=7,
        wtm_low_level_dim=256,
        wtm_num_heads=[
            8,
            8,
            8,
            8,
        ],
        wtm_out_dim=128,
        wtm_reduction=32,
        wtm_size=(
            64,
            64,
        )),
    data_preprocessor=dict(
        bgr_to_rgb=True,
        mean=[
            123.675,
            116.28,
            103.53,
        ],
        std=[
            58.395,
            57.12,
            57.375,
        ],
        type='PoseDataPreprocessor'),
    head=dict(
        conv_out_channels=False,
        decoder=dict(
            heatmap_size=(
                64,
                64,
            ),
            input_size=(
                256,
                256,
            ),
            sigma=2,
            type='MSRAHeatmap'),
        deconv_out_channels=False,
        in_channels=128,
        loss=dict(type='KeypointMSELoss', use_target_weight=True),
        out_channels=17,
        type='HeatmapHeadWTPose'),
    test_cfg=dict(flip_mode='heatmap', flip_test=True, shift_heatmap=True),
    type='TopdownPoseEstimator')
norm_cfg = dict(requires_grad=True, type='SyncBN')
optim_wrapper = dict(optimizer=dict(lr=0.0005, type='Adam'))
param_scheduler = [
    dict(
        begin=0, by_epoch=False, end=500, start_factor=0.001, type='LinearLR'),
    dict(
        begin=0,
        by_epoch=True,
        end=210,
        gamma=0.1,
        milestones=[
            170,
            200,
        ],
        type='MultiStepLR'),
]
resume = False
test_cfg = dict()
test_dataloader = dict(
    batch_size=32,
    dataset=dict(
        ann_file='annotations/person_keypoints_val2017.json',
        bbox_file=
        'data/coco/person_detection_results/COCO_val2017_detections_AP_H_56_person.json',
        data_mode='topdown',
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(type='LoadImage'),
            dict(type='GetBBoxCenterScale'),
            dict(input_size=(
                256,
                256,
            ), type='TopdownAffine'),
            dict(type='PackPoseInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(round_up=False, shuffle=False, type='DefaultSampler'))
test_evaluator = dict(
    ann_file='data/coco/annotations/person_keypoints_val2017.json',
    type='CocoMetric')
train_cfg = dict(by_epoch=True, max_epochs=210, val_interval=1)
train_dataloader = dict(
    batch_size=32,
    dataset=dict(
        datasets=[
            dict(
                ann_file='annotations/aic_train.json',
                data_mode='topdown',
                data_prefix=dict(
                    img=
                    'ai_challenger_keypoint_train_20170902/keypoint_train_images_20170902/'
                ),
                data_root='data/aic/',
                pipeline=[
                    dict(
                        mapping=[
                            (
                                0,
                                6,
                            ),
                            (
                                1,
                                8,
                            ),
                            (
                                2,
                                10,
                            ),
                            (
                                3,
                                5,
                            ),
                            (
                                4,
                                7,
                            ),
                            (
                                5,
                                9,
                            ),
                            (
                                6,
                                12,
                            ),
                            (
                                7,
                                14,
                            ),
                            (
                                8,
                                16,
                            ),
                            (
                                9,
                                11,
                            ),
                            (
                                10,
                                13,
                            ),
                            (
                                11,
                                15,
                            ),
                            (
                                12,
                                17,
                            ),
                            (
                                13,
                                18,
                            ),
                        ],
                        num_keypoints=19,
                        type='KeypointConverter'),
                ],
                type='AicDataset'),
        ],
        metainfo=dict(from_file='configs/_base_/datasets/coco_aic.py'),
        pipeline=[
            dict(type='LoadImage'),
            dict(type='GetBBoxCenterScale'),
            dict(direction='horizontal', type='RandomFlip'),
            dict(type='RandomHalfBody'),
            dict(type='RandomBBoxTransform'),
            dict(input_size=(
                256,
                256,
            ), type='TopdownAffine'),
            dict(
                encoder=dict(
                    heatmap_size=(
                        64,
                        64,
                    ),
                    input_size=(
                        256,
                        256,
                    ),
                    sigma=2,
                    type='MSRAHeatmap'),
                type='GenerateTarget'),
            dict(type='PackPoseInputs'),
        ],
        test_mode=False,
        type='CombinedDataset'),
    num_workers=2,
    persistent_workers=True,
    sampler=dict(shuffle=True, type='DefaultSampler'))
train_pipeline = [
    dict(type='LoadImage'),
    dict(type='GetBBoxCenterScale'),
    dict(direction='horizontal', type='RandomFlip'),
    dict(type='RandomHalfBody'),
    dict(type='RandomBBoxTransform'),
    dict(input_size=(
        256,
        256,
    ), type='TopdownAffine'),
    dict(
        encoder=dict(
            heatmap_size=(
                64,
                64,
            ),
            input_size=(
                256,
                256,
            ),
            sigma=2,
            type='MSRAHeatmap'),
        type='GenerateTarget'),
    dict(type='PackPoseInputs'),
]
val_cfg = dict()
val_dataloader = dict(
    batch_size=32,
    dataset=dict(
        ann_file='annotations/person_keypoints_val2017.json',
        bbox_file=
        'data/coco/person_detection_results/COCO_val2017_detections_AP_H_56_person.json',
        data_mode='topdown',
        data_prefix=dict(img='val2017/'),
        data_root='data/coco/',
        pipeline=[
            dict(type='LoadImage'),
            dict(type='GetBBoxCenterScale'),
            dict(input_size=(
                256,
                256,
            ), type='TopdownAffine'),
            dict(type='PackPoseInputs'),
        ],
        test_mode=True,
        type='CocoDataset'),
    drop_last=False,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(round_up=False, shuffle=False, type='DefaultSampler'))
val_evaluator = dict(
    ann_file='data/coco/annotations/person_keypoints_val2017.json',
    type='CocoMetric')
val_pipeline = [
    dict(type='LoadImage'),
    dict(type='GetBBoxCenterScale'),
    dict(input_size=(
        256,
        256,
    ), type='TopdownAffine'),
    dict(type='PackPoseInputs'),
]
vis_backends = [
    dict(type='LocalVisBackend'),
]
visualizer = dict(
    name='visualizer',
    type='PoseLocalVisualizer',
    vis_backends=[
        dict(type='LocalVisBackend'),
    ])
work_dir = './work_dirs/aa_WTPose_SwinV2_b_w8_coco_aic_256x256_1k'

09/17 19:44:03 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SyncBuffersHook                    
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) PoseVisualizationHook              
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_val:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) PoseVisualizationHook              
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test:
(VERY_HIGH   ) RuntimeInfoHook                    
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
loading annotations into memory...
loading annotations into memory...
Done (t=4.84s)
creating index...
index created!
Done (t=4.80s)
creating index...
index created!
loading annotations into memory...
Done (t=0.17s)
creating index...
index created!
loading annotations into memory...
Done (t=0.17s)
creating index...
index created!
loading annotations into memory...
Done (t=0.17s)
creating index...
index created!
loading annotations into memory...
Done (t=0.17s)
creating index...
index created!
09/17 19:45:07 - mmengine - INFO - load model from: /home/nr4325/Desktop/Pose4/mmpose/ImageNet_pretrained_model/resnet101_swinv2_b.pth
09/17 19:45:07 - mmengine - INFO - Loads checkpoint by local backend from path: /home/nr4325/Desktop/Pose4/mmpose/ImageNet_pretrained_model/resnet101_swinv2_b.pth
09/17 19:45:08 - mmengine - INFO - Delete `relative_position_index` and `relative_coords_table` since we always re-init these params according to the `window_size`, which might cause unwanted but unworried warnings when loading checkpoint.
09/17 19:45:08 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: patch_embed.projection.weight, patch_embed.projection.bias, patch_embed.norm.weight, patch_embed.norm.bias, head.fc.weight, head.fc.bias

missing keys in source state_dict: stages.0.blocks.0.attn.w_msa.relative_coords_table, stages.0.blocks.0.attn.w_msa.relative_position_index, stages.0.blocks.1.attn.w_msa.relative_coords_table, stages.0.blocks.1.attn.w_msa.relative_position_index, stages.1.blocks.0.attn.w_msa.relative_coords_table, stages.1.blocks.0.attn.w_msa.relative_position_index, stages.1.blocks.1.attn.w_msa.relative_coords_table, stages.1.blocks.1.attn.w_msa.relative_position_index, stages.2.blocks.0.attn.w_msa.relative_coords_table, stages.2.blocks.0.attn.w_msa.relative_position_index, stages.2.blocks.1.attn.w_msa.relative_coords_table, stages.2.blocks.1.attn.w_msa.relative_position_index, stages.2.blocks.2.attn.w_msa.relative_coords_table, stages.2.blocks.2.attn.w_msa.relative_position_index, stages.2.blocks.3.attn.w_msa.relative_coords_table, stages.2.blocks.3.attn.w_msa.relative_position_index, stages.2.blocks.4.attn.w_msa.relative_coords_table, stages.2.blocks.4.attn.w_msa.relative_position_index, stages.2.blocks.5.attn.w_msa.relative_coords_table, stages.2.blocks.5.attn.w_msa.relative_position_index, stages.2.blocks.6.attn.w_msa.relative_coords_table, stages.2.blocks.6.attn.w_msa.relative_position_index, stages.2.blocks.7.attn.w_msa.relative_coords_table, stages.2.blocks.7.attn.w_msa.relative_position_index, stages.2.blocks.8.attn.w_msa.relative_coords_table, stages.2.blocks.8.attn.w_msa.relative_position_index, stages.2.blocks.9.attn.w_msa.relative_coords_table, stages.2.blocks.9.attn.w_msa.relative_position_index, stages.2.blocks.10.attn.w_msa.relative_coords_table, stages.2.blocks.10.attn.w_msa.relative_position_index, stages.2.blocks.11.attn.w_msa.relative_coords_table, stages.2.blocks.11.attn.w_msa.relative_position_index, stages.2.blocks.12.attn.w_msa.relative_coords_table, stages.2.blocks.12.attn.w_msa.relative_position_index, stages.2.blocks.13.attn.w_msa.relative_coords_table, stages.2.blocks.13.attn.w_msa.relative_position_index, stages.2.blocks.14.attn.w_msa.relative_coords_table, stages.2.blocks.14.attn.w_msa.relative_position_index, stages.2.blocks.15.attn.w_msa.relative_coords_table, stages.2.blocks.15.attn.w_msa.relative_position_index, stages.2.blocks.16.attn.w_msa.relative_coords_table, stages.2.blocks.16.attn.w_msa.relative_position_index, stages.2.blocks.17.attn.w_msa.relative_coords_table, stages.2.blocks.17.attn.w_msa.relative_position_index, stages.3.blocks.0.attn.w_msa.relative_coords_table, stages.3.blocks.0.attn.w_msa.relative_position_index, stages.3.blocks.1.attn.w_msa.relative_coords_table, stages.3.blocks.1.attn.w_msa.relative_position_index, norm0.weight, norm0.bias, norm1.weight, norm1.bias, norm2.weight, norm2.bias, resnet.stem.0.conv.weight, resnet.stem.0.bn.weight, resnet.stem.0.bn.bias, resnet.stem.0.bn.running_mean, resnet.stem.0.bn.running_var, resnet.stem.1.conv.weight, resnet.stem.1.bn.weight, resnet.stem.1.bn.bias, resnet.stem.1.bn.running_mean, resnet.stem.1.bn.running_var, wtm.wtm1_0.gamma1, wtm.wtm1_0.gamma2, wtm.wtm1_0.norm1.weight, wtm.wtm1_0.norm1.bias, wtm.wtm1_0.attn.rpb, wtm.wtm1_0.attn.qkv.weight, wtm.wtm1_0.attn.qkv.bias, wtm.wtm1_0.attn.proj.weight, wtm.wtm1_0.attn.proj.bias, wtm.wtm1_0.norm2.weight, wtm.wtm1_0.norm2.bias, wtm.wtm1_0.mlp.fc1.weight, wtm.wtm1_0.mlp.fc1.bias, wtm.wtm1_0.mlp.fc2.weight, wtm.wtm1_0.mlp.fc2.bias, wtm.wtm1_1.gamma1, wtm.wtm1_1.gamma2, wtm.wtm1_1.norm1.weight, wtm.wtm1_1.norm1.bias, wtm.wtm1_1.attn.rpb, wtm.wtm1_1.attn.qkv.weight, wtm.wtm1_1.attn.qkv.bias, wtm.wtm1_1.attn.proj.weight, wtm.wtm1_1.attn.proj.bias, wtm.wtm1_1.norm2.weight, wtm.wtm1_1.norm2.bias, wtm.wtm1_1.mlp.fc1.weight, wtm.wtm1_1.mlp.fc1.bias, wtm.wtm1_1.mlp.fc2.weight, wtm.wtm1_1.mlp.fc2.bias, wtm.wtm2_0.gamma1, wtm.wtm2_0.gamma2, wtm.wtm2_0.norm1.weight, wtm.wtm2_0.norm1.bias, wtm.wtm2_0.attn.rpb, wtm.wtm2_0.attn.qkv.weight, wtm.wtm2_0.attn.qkv.bias, wtm.wtm2_0.attn.proj.weight, wtm.wtm2_0.attn.proj.bias, wtm.wtm2_0.norm2.weight, wtm.wtm2_0.norm2.bias, wtm.wtm2_0.mlp.fc1.weight, wtm.wtm2_0.mlp.fc1.bias, wtm.wtm2_0.mlp.fc2.weight, wtm.wtm2_0.mlp.fc2.bias, wtm.wtm2_1.gamma1, wtm.wtm2_1.gamma2, wtm.wtm2_1.norm1.weight, wtm.wtm2_1.norm1.bias, wtm.wtm2_1.attn.rpb, wtm.wtm2_1.attn.qkv.weight, wtm.wtm2_1.attn.qkv.bias, wtm.wtm2_1.attn.proj.weight, wtm.wtm2_1.attn.proj.bias, wtm.wtm2_1.norm2.weight, wtm.wtm2_1.norm2.bias, wtm.wtm2_1.mlp.fc1.weight, wtm.wtm2_1.mlp.fc1.bias, wtm.wtm2_1.mlp.fc2.weight, wtm.wtm2_1.mlp.fc2.bias, wtm.wtm3_0.gamma1, wtm.wtm3_0.gamma2, wtm.wtm3_0.norm1.weight, wtm.wtm3_0.norm1.bias, wtm.wtm3_0.attn.rpb, wtm.wtm3_0.attn.qkv.weight, wtm.wtm3_0.attn.qkv.bias, wtm.wtm3_0.attn.proj.weight, wtm.wtm3_0.attn.proj.bias, wtm.wtm3_0.norm2.weight, wtm.wtm3_0.norm2.bias, wtm.wtm3_0.mlp.fc1.weight, wtm.wtm3_0.mlp.fc1.bias, wtm.wtm3_0.mlp.fc2.weight, wtm.wtm3_0.mlp.fc2.bias, wtm.wtm3_1.gamma1, wtm.wtm3_1.gamma2, wtm.wtm3_1.norm1.weight, wtm.wtm3_1.norm1.bias, wtm.wtm3_1.attn.rpb, wtm.wtm3_1.attn.qkv.weight, wtm.wtm3_1.attn.qkv.bias, wtm.wtm3_1.attn.proj.weight, wtm.wtm3_1.attn.proj.bias, wtm.wtm3_1.norm2.weight, wtm.wtm3_1.norm2.bias, wtm.wtm3_1.mlp.fc1.weight, wtm.wtm3_1.mlp.fc1.bias, wtm.wtm3_1.mlp.fc2.weight, wtm.wtm3_1.mlp.fc2.bias, wtm.wtm4_0.gamma1, wtm.wtm4_0.gamma2, wtm.wtm4_0.norm1.weight, wtm.wtm4_0.norm1.bias, wtm.wtm4_0.attn.rpb, wtm.wtm4_0.attn.qkv.weight, wtm.wtm4_0.attn.qkv.bias, wtm.wtm4_0.attn.proj.weight, wtm.wtm4_0.attn.proj.bias, wtm.wtm4_0.norm2.weight, wtm.wtm4_0.norm2.bias, wtm.wtm4_0.mlp.fc1.weight, wtm.wtm4_0.mlp.fc1.bias, wtm.wtm4_0.mlp.fc2.weight, wtm.wtm4_0.mlp.fc2.bias, wtm.wtm4_1.gamma1, wtm.wtm4_1.gamma2, wtm.wtm4_1.norm1.weight, wtm.wtm4_1.norm1.bias, wtm.wtm4_1.attn.rpb, wtm.wtm4_1.attn.qkv.weight, wtm.wtm4_1.attn.qkv.bias, wtm.wtm4_1.attn.proj.weight, wtm.wtm4_1.attn.proj.bias, wtm.wtm4_1.norm2.weight, wtm.wtm4_1.norm2.bias, wtm.wtm4_1.mlp.fc1.weight, wtm.wtm4_1.mlp.fc1.bias, wtm.wtm4_1.mlp.fc2.weight, wtm.wtm4_1.mlp.fc2.bias, wtm.global_avg_pool.1.weight, wtm.global_avg_pool.2.weight, wtm.global_avg_pool.2.bias, wtm.global_avg_pool.2.running_mean, wtm.global_avg_pool.2.running_var, wtm.conv1.weight, wtm.bn1.weight, wtm.bn1.bias, wtm.bn1.running_mean, wtm.bn1.running_var, wtm.conv2.weight, wtm.bn2.weight, wtm.bn2.bias, wtm.bn2.running_mean, wtm.bn2.running_var, wtm.low.weight, wtm.bn_low.weight, wtm.bn_low.bias, wtm.bn_low.running_mean, wtm.bn_low.running_var, wtm.last_conv.0.weight, wtm.last_conv.1.weight, wtm.last_conv.1.bias, wtm.last_conv.1.running_mean, wtm.last_conv.1.running_var, wtm.last_conv.3.weight, wtm.last_conv.4.weight, wtm.last_conv.4.bias, wtm.last_conv.4.running_mean, wtm.last_conv.4.running_var, conv3.weight, bn3.weight, bn3.bias, bn3.running_mean, bn3.running_var

09/17 19:45:08 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
09/17 19:45:08 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
09/17 19:45:08 - mmengine - INFO - Checkpoints will be saved to /home/nr4325/Desktop/Pose4/mmpose/work_dirs/aa_WTPose_SwinV2_b_w8_coco_aic_256x256_1k.
